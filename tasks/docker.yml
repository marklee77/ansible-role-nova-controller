---
- name: ensure dockerfile directories exist
  file:
    path: "{{ item }}"
    owner: "{{ ansible_ssh_user }}"
    state: directory
  with_items:
    - "{{ ansible_env.PWD }}/.ansible_cache"
    - "{{ ansible_env.PWD }}/.ansible_cache/docker"

- name: synchronize role to remote cache for Dockerfile build
  synchronize:
    src: ../
    dest: "{{ ansible_env.PWD }}/.ansible_cache/docker/nova-controller"
    archive: no
    checksum: yes
    recursive: yes

- name: ensure docker image configuration directory exists
  file:
    path: "{{ item }}"
    owner: "{{ ansible_ssh_user }}"
    state: directory
  with_items:
    - "{{ ansible_env.PWD }}/.ansible_cache/docker/nova-controller/playbooks/group_vars"

- name: update configuration used to build docker image from template
  template:
    src: ansible_cache/docker/nova-controller/playbooks/group_vars/all.yml
    owner: "{{ ansible_ssh_user }}"
    dest: "{{ ansible_env.PWD }}/.ansible_cache/docker/nova-controller/playbooks/group_vars/all.yml"

- name: ensure nova docker image has been built
  docker_image:
    name: "{{ nova_controller_docker_username }}/{{ nova_controller_docker_imagename }}"
    path: "{{ ansible_env.PWD }}/.ansible_cache/docker/nova-controller"
    state: present

- name: ensure nova data container exists
  docker:
    image: "{{ nova_controller_docker_username }}/{{ nova_controller_docker_imagename }}"
    name: "{{ nova_controller_docker_containername }}_data"
    command: >
      ansible-playbook 
        -i inventories/local.ini playbooks/offline_configuration.yml -e '{ 
          "nova_log_verbose" : "{{ nova_log_verbose }}",
          "nova_log_debug" : "{{ nova_log_debug }}",
          "nova_log_dir" : "{{ nova_log_dir }}",
          "nova_rabbitmq_host" : "{{ nova_rabbitmq_host }}",
          "nova_rabbitmq_port" : "{{ nova_rabbitmq_port }}",
          "nova_rabbitmq_nova_password" :
            "{{ nova_rabbitmq_nova_password }}",
          "nova_mysql_host" : "{{ nova_mysql_host }}",
          "nova_mysql_port" : "{{ nova_mysql_port }}",
          "nova_mysql_nova_password" :
            "{{ nova_mysql_nova_password }}",
          "nova_compute_host" : "{{ nova_compute_host }}",
          "nova_identity_host" : "{{ nova_identity_host }}",
          "nova_identity_internal_url" : "{{ nova_identity_internal_url }}",
          "nova_identity_nova_password" : "{{ nova_identity_nova_password }}" }'
    detach: no
    state: present

- name: wait until offline configuration is completed
  command: docker wait "{{ nova_controller_docker_containername }}_data"
  register: docker_wait
  changed_when: false

- name: collect offline configuration log
  command: docker logs "{{ nova_controller_docker_containername }}_data"
  register: offline_configuration_log
  changed_when: false

- name: display offline configuration log
  debug:
    msg: "{{ offline_configuration_log.stdout_lines }}"

- name: fail on offline configuration failure
  assert:
    that: docker_wait.stdout == "0"

- name: ensure nova service is running
  docker:
    image: "{{ nova_controller_docker_username }}/{{ nova_controller_docker_imagename }}"
    name: "{{ nova_controller_docker_containername }}_server"
    volumes_from: "{{ nova_controller_docker_containername }}_data"
    ports:
      - 6080:6080
      - 6081:6081
      - 6082:6082
      - 8773:8773
      - 8774:8774
      - 8775:8775
    privileged: yes
    detach: yes
    state: running

